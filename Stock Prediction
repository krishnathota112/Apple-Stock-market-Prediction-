{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10364975,"sourceType":"datasetVersion","datasetId":6419733}],"dockerImageVersionId":30822,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.289783Z","iopub.execute_input":"2025-01-06T17:13:00.290175Z","iopub.status.idle":"2025-01-06T17:13:00.294730Z","shell.execute_reply.started":"2025-01-06T17:13:00.290139Z","shell.execute_reply":"2025-01-06T17:13:00.293735Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"THIS IS ARE BASIC LIBRARIES USED FOR EDA\nNOW I WILL IMPORT ML LIBRARIES\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.296453Z","iopub.execute_input":"2025-01-06T17:13:00.296848Z","iopub.status.idle":"2025-01-06T17:13:00.316086Z","shell.execute_reply.started":"2025-01-06T17:13:00.296809Z","shell.execute_reply":"2025-01-06T17:13:00.314574Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/apple-stock-data-2025/apple_stock.csv')\nprint(df.head(100))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.317667Z","iopub.execute_input":"2025-01-06T17:13:00.318085Z","iopub.status.idle":"2025-01-06T17:13:00.361815Z","shell.execute_reply.started":"2025-01-06T17:13:00.318033Z","shell.execute_reply":"2025-01-06T17:13:00.360776Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"CHECKING IF THE DATA IS CLEANED ","metadata":{}},{"cell_type":"code","source":"df=df.dropna()\nmissing_values=df.isna().mean()*100\nduplicated_rows=df.duplicated().mean()\nprint(f\"values{missing_values}:duplictes{duplicated_rows}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.363392Z","iopub.execute_input":"2025-01-06T17:13:00.363803Z","iopub.status.idle":"2025-01-06T17:13:00.380350Z","shell.execute_reply.started":"2025-01-06T17:13:00.363763Z","shell.execute_reply":"2025-01-06T17:13:00.379267Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.describe().T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.381383Z","iopub.execute_input":"2025-01-06T17:13:00.381762Z","iopub.status.idle":"2025-01-06T17:13:00.416357Z","shell.execute_reply.started":"2025-01-06T17:13:00.381725Z","shell.execute_reply":"2025-01-06T17:13:00.415252Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def outlier_check(row, colname):  \n    Q1 = row[colname].quantile(0.25)\n    Q3 = row[colname].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_b = Q1 - 1.5 * IQR\n    upper_b = Q3 + 1.5 * IQR\n    outlier = row.loc[(row[colname] < lower_b) | (row[colname] > upper_b)]\n    return outlier\n    \noutliers = pd.DataFrame() \n\nfor col in df.select_dtypes(include=['number']).columns: \n    outliers_in_col = outlier_check(df, col) \n    outliers = pd.concat([outliers, outliers_in_col])\n\noutliers.reset_index(drop=True, inplace=True)\noutliers","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.417430Z","iopub.execute_input":"2025-01-06T17:13:00.417808Z","iopub.status.idle":"2025-01-06T17:13:00.453426Z","shell.execute_reply.started":"2025-01-06T17:13:00.417773Z","shell.execute_reply":"2025-01-06T17:13:00.452545Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"REMOVING TIMEZONE ASSOCIATIONS ","metadata":{}},{"cell_type":"code","source":"df[\"Unnamed: 0\"] = pd.to_datetime(df[\"Unnamed: 0\"], utc=True)  \ndf[\"Unnamed: 0\"] = df[\"Unnamed: 0\"].dt.tz_convert(None)  \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.454399Z","iopub.execute_input":"2025-01-06T17:13:00.454666Z","iopub.status.idle":"2025-01-06T17:13:00.464286Z","shell.execute_reply.started":"2025-01-06T17:13:00.454644Z","shell.execute_reply":"2025-01-06T17:13:00.463049Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"STORING DATA FOR YEARLY WISE AND DAILY WISE(AVG )","metadata":{}},{"cell_type":"code","source":"df[\"Year\"]= df[\"Unnamed: 0\"].dt.year\nyearly_data=df.groupby(\"Year\")[\"Close\"].mean()\ndaily_data=df.groupby(\"Unnamed: 0\")[\"Close\"].mean()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.466888Z","iopub.execute_input":"2025-01-06T17:13:00.467217Z","iopub.status.idle":"2025-01-06T17:13:00.487134Z","shell.execute_reply.started":"2025-01-06T17:13:00.467190Z","shell.execute_reply":"2025-01-06T17:13:00.486117Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"PICTORIZING THE GRAPH OR PLOTTING THE GRAPH\n","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(12,6))\nplt.plot(yearly_data.index,yearly_data.values,marker=\"o\",color=\"red\")\nplt.title(\"Graph representing avg close Price vs Year\",fontsize=\"19\")\nplt.xlabel(\"Avg close price\",fontsize=\"13\")\nplt.ylabel(\"Year\",fontsize=\"13\")\nplt.grid(visible=True,linestyle=\"--\",linewidth=0.5)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.488475Z","iopub.execute_input":"2025-01-06T17:13:00.488747Z","iopub.status.idle":"2025-01-06T17:13:00.700579Z","shell.execute_reply.started":"2025-01-06T17:13:00.488712Z","shell.execute_reply":"2025-01-06T17:13:00.699471Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"NOW LET US SEE THE DAILY CLOSE PRICE OF THE STOCK ","metadata":{}},{"cell_type":"code","source":"\nplt.figure(figsize=(12, 6))\nplt.plot(daily_data.index, daily_data.values, color=\"red\")\nplt.title(\"Daily Close Prices\", fontsize=18)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Close Price\", fontsize=12)\nplt.xticks(rotation=45)\nplt.grid(visible=True, linestyle=\"--\", linewidth=0.5)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:00.701770Z","iopub.execute_input":"2025-01-06T17:13:00.702188Z","iopub.status.idle":"2025-01-06T17:13:01.079982Z","shell.execute_reply.started":"2025-01-06T17:13:00.702146Z","shell.execute_reply":"2025-01-06T17:13:01.078885Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"USING A POLYNOMIAL REGRESSION MODEL WHICH IS SAID TO BETTER PERFORMED FOR THIS USECASE SOURCE: lko9911","metadata":{}},{"cell_type":"code","source":"X = df[['Open', 'High', 'Low']]\ny = df['Close']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:01.080864Z","iopub.execute_input":"2025-01-06T17:13:01.081152Z","iopub.status.idle":"2025-01-06T17:13:01.095687Z","shell.execute_reply.started":"2025-01-06T17:13:01.081128Z","shell.execute_reply":"2025-01-06T17:13:01.094714Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Degree = 10  \nlist_MSE = []\nlist_R2 = []\n\nfor degree in range(1, Degree + 1):\n    poly = PolynomialFeatures(degree=degree)\n    X_train_poly = poly.fit_transform(X_train)\n    X_test_poly = poly.transform(X_test)\n    model = LinearRegression()\n    model.fit(X_train_poly, y_train)\n    y_pred = model.predict(X_test_poly)\n    mse = mean_squared_error(y_test, y_pred)\n    r2 = r2_score(y_test, y_pred)\n    list_MSE.append((degree, mse))\n    list_R2.append((degree,r2))\n    print(f'Degree {degree}: MSE = {mse}, R2 = {r2}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:01.096913Z","iopub.execute_input":"2025-01-06T17:13:01.097214Z","iopub.status.idle":"2025-01-06T17:13:02.341696Z","shell.execute_reply.started":"2025-01-06T17:13:01.097189Z","shell.execute_reply":"2025-01-06T17:13:02.339761Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Looking For Best MSE and R2 score with degree evaluation \nAnd plotting the values against mse VS degree and R2 VS degree","metadata":{}},{"cell_type":"code","source":"degrees, mse_values = zip(*list_MSE)\n_, r2_values = zip(*list_R2)\n\nbest_degree_mse = degrees[mse_values.index(min(mse_values))] \nbest_degree_r2 = degrees[r2_values.index(max(r2_values))]  \n\n\nplt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\nplt.plot(degrees,mse_values,marker=\"o\",label=\"mse\",color=\"blue\")\nplt.axvline(best_degree_mse, color='red', linestyle='--', label=f'Best Degree: {best_degree_mse}')\nplt.title(\"Degree VS MSE\",fontsize=19)\nplt.xlabel(\"Degree\",fontsize=13)\nplt.ylabel(\"Mean Squared Error(MSE)\",fontsize=13)\nplt.grid(True)\nplt.xticks(degrees)\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(12,6))\nplt.subplot(1,2,2)\nplt.plot(degrees,mse_values,marker=\"o\",label=\"mse\",color=\"blue\")\nplt.axvline(best_degree_r2, color='red', linestyle='--', label=f'Best Degree: {best_degree_mse}')\nplt.title(\"Degree VS R2\",fontsize=19)\nplt.xlabel(\"Degree\",fontsize=13)\nplt.ylabel(\"R2\",fontsize=13)\nplt.grid(True)\nplt.xticks(degrees)\nplt.legend()\nplt.show()\n\nprint(f'Best Degree for MSE: {best_degree_mse}')\nprint(f'Best Degree for R2: {best_degree_r2}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:02.342541Z","iopub.execute_input":"2025-01-06T17:13:02.342911Z","iopub.status.idle":"2025-01-06T17:13:03.044105Z","shell.execute_reply.started":"2025-01-06T17:13:02.342882Z","shell.execute_reply":"2025-01-06T17:13:03.042920Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"degree = 3\npoly = PolynomialFeatures(degree=degree)\n\nX_train_poly = poly.fit_transform(X_train)\nX_test_poly = poly.transform(X_test)\n\nmodel = LinearRegression()\nmodel.fit(X_train_poly, y_train)\n\ny_pred = model.predict(X_test_poly)\n\nplt.figure(figsize=(10, 6))\nplt.scatter(y_test, y_pred, color='blue', s=8, edgecolor='black', label='Predictions')\n\nplt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', linewidth=2, label='Ideal (y=x)')\n\nplt.title(f'Actual vs Predicted Values (Polynomial Regression, degree={degree})', fontsize=16)\nplt.xlabel('Actual Values', fontsize=12)\nplt.ylabel('Predicted Values', fontsize=12)\nplt.legend(fontsize=12)\nplt.grid()\nplt.show()\n\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\nprint(f'Polynomial Regression (degree={degree}) Result: MSE = {mse}, R2 = {r2}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T17:13:03.045157Z","iopub.execute_input":"2025-01-06T17:13:03.045471Z","iopub.status.idle":"2025-01-06T17:13:03.441853Z","shell.execute_reply.started":"2025-01-06T17:13:03.045446Z","shell.execute_reply":"2025-01-06T17:13:03.440649Z"}},"outputs":[],"execution_count":null}]}